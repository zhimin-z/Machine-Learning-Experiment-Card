/**
 */
package mlam.provider;

import java.util.ArrayList;
import java.util.Collection;

import mlam.util.MlamAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MlamItemProviderAdapterFactory extends MlamAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MlamItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectItemProvider projectItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdapter() {
		if (projectItemProvider == null) {
			projectItemProvider = new ProjectItemProvider(this);
		}

		return projectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Experiment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExperimentItemProvider experimentItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Experiment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExperimentAdapter() {
		if (experimentItemProvider == null) {
			experimentItemProvider = new ExperimentItemProvider(this);
		}

		return experimentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Run} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunItemProvider runItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Run}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunAdapter() {
		if (runItemProvider == null) {
			runItemProvider = new RunItemProvider(this);
		}

		return runItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.ProductionCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductionCodeItemProvider productionCodeItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.ProductionCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductionCodeAdapter() {
		if (productionCodeItemProvider == null) {
			productionCodeItemProvider = new ProductionCodeItemProvider(this);
		}

		return productionCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.ConfigurationFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationFileItemProvider configurationFileItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.ConfigurationFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationFileAdapter() {
		if (configurationFileItemProvider == null) {
			configurationFileItemProvider = new ConfigurationFileItemProvider(this);
		}

		return configurationFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.SourceFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceFileItemProvider sourceFileItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.SourceFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceFileAdapter() {
		if (sourceFileItemProvider == null) {
			sourceFileItemProvider = new SourceFileItemProvider(this);
		}

		return sourceFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Dependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyItemProvider dependencyItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Dependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyAdapter() {
		if (dependencyItemProvider == null) {
			dependencyItemProvider = new DependencyItemProvider(this);
		}

		return dependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Hyperparameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HyperparameterItemProvider hyperparameterItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Hyperparameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHyperparameterAdapter() {
		if (hyperparameterItemProvider == null) {
			hyperparameterItemProvider = new HyperparameterItemProvider(this);
		}

		return hyperparameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.NeuralArchitecture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeuralArchitectureItemProvider neuralArchitectureItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.NeuralArchitecture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeuralArchitectureAdapter() {
		if (neuralArchitectureItemProvider == null) {
			neuralArchitectureItemProvider = new NeuralArchitectureItemProvider(this);
		}

		return neuralArchitectureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Dataset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetItemProvider datasetItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Dataset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatasetAdapter() {
		if (datasetItemProvider == null) {
			datasetItemProvider = new DatasetItemProvider(this);
		}

		return datasetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.TrainData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrainDataItemProvider trainDataItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.TrainData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrainDataAdapter() {
		if (trainDataItemProvider == null) {
			trainDataItemProvider = new TrainDataItemProvider(this);
		}

		return trainDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.TestData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestDataItemProvider testDataItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.TestData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestDataAdapter() {
		if (testDataItemProvider == null) {
			testDataItemProvider = new TestDataItemProvider(this);
		}

		return testDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.EvalData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvalDataItemProvider evalDataItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.EvalData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvalDataAdapter() {
		if (evalDataItemProvider == null) {
			evalDataItemProvider = new EvalDataItemProvider(this);
		}

		return evalDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Specification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificationItemProvider specificationItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Specification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificationAdapter() {
		if (specificationItemProvider == null) {
			specificationItemProvider = new SpecificationItemProvider(this);
		}

		return specificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Log} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogItemProvider logItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Log}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogAdapter() {
		if (logItemProvider == null) {
			logItemProvider = new LogItemProvider(this);
		}

		return logItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.RandomSeed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RandomSeedItemProvider randomSeedItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.RandomSeed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandomSeedAdapter() {
		if (randomSeedItemProvider == null) {
			randomSeedItemProvider = new RandomSeedItemProvider(this);
		}

		return randomSeedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.ExecutionData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionDataItemProvider executionDataItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.ExecutionData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutionDataAdapter() {
		if (executionDataItemProvider == null) {
			executionDataItemProvider = new ExecutionDataItemProvider(this);
		}

		return executionDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Explainable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExplainableItemProvider explainableItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Explainable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExplainableAdapter() {
		if (explainableItemProvider == null) {
			explainableItemProvider = new ExplainableItemProvider(this);
		}

		return explainableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.Metrics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricsItemProvider metricsItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.Metrics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricsAdapter() {
		if (metricsItemProvider == null) {
			metricsItemProvider = new MetricsItemProvider(this);
		}

		return metricsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mlam.GeneratedArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneratedArtifactItemProvider generatedArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link mlam.GeneratedArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneratedArtifactAdapter() {
		if (generatedArtifactItemProvider == null) {
			generatedArtifactItemProvider = new GeneratedArtifactItemProvider(this);
		}

		return generatedArtifactItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (projectItemProvider != null) projectItemProvider.dispose();
		if (experimentItemProvider != null) experimentItemProvider.dispose();
		if (runItemProvider != null) runItemProvider.dispose();
		if (productionCodeItemProvider != null) productionCodeItemProvider.dispose();
		if (configurationFileItemProvider != null) configurationFileItemProvider.dispose();
		if (sourceFileItemProvider != null) sourceFileItemProvider.dispose();
		if (dependencyItemProvider != null) dependencyItemProvider.dispose();
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (hyperparameterItemProvider != null) hyperparameterItemProvider.dispose();
		if (neuralArchitectureItemProvider != null) neuralArchitectureItemProvider.dispose();
		if (datasetItemProvider != null) datasetItemProvider.dispose();
		if (trainDataItemProvider != null) trainDataItemProvider.dispose();
		if (testDataItemProvider != null) testDataItemProvider.dispose();
		if (evalDataItemProvider != null) evalDataItemProvider.dispose();
		if (specificationItemProvider != null) specificationItemProvider.dispose();
		if (logItemProvider != null) logItemProvider.dispose();
		if (randomSeedItemProvider != null) randomSeedItemProvider.dispose();
		if (executionDataItemProvider != null) executionDataItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (explainableItemProvider != null) explainableItemProvider.dispose();
		if (metricsItemProvider != null) metricsItemProvider.dispose();
		if (generatedArtifactItemProvider != null) generatedArtifactItemProvider.dispose();
	}

}
